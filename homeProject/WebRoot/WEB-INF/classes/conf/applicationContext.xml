<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd	
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
	
	<!-- 装载属性配置文件-->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:/conf/*.properties</value>
			</list>
		</property>
		<property name="propertiesPersister">
            <bean class="com.house.framework.commons.conf.DbPropertiesPersist" />
        </property>
	</bean>
	
	<!-- 配置数据源-->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass"
			value="${jdbc.connection.driver_class}" />
		<property name="jdbcUrl" value="${jdbc.connection.url}" />
		<property name="user" value="${jdbc.connection.username}" />
		<property name="password"
			value="${jdbc.connection.password}" />
		<property name="minPoolSize"
			value="${jdbc.c3p0.minPoolSize}" />
		<property name="maxPoolSize"
			value="${jdbc.c3p0.maxPoolSize}" />
		<property name="initialPoolSize"
			value="${jdbc.c3p0.initialPoolSize}" />
		<property name="maxIdleTime"
			value="${jdbc.c3p0.maxIdleTime}" />
		<property name="acquireIncrement"
			value="${jdbc.c3p0.acquireIncrement}" />
		<property name="maxStatements"
			value="${jdbc.c3p0.maxStatements}" />
		<property name="idleConnectionTestPeriod"
			value="${jdbc.c3p0.idleConnectionTestPeriod}" />
		<property name="acquireRetryAttempts"
			value="${jdbc.c3p0.acquireRetryAttempts}" />
		<property name="breakAfterAcquireFailure"
			value="${jdbc.c3p0.breakAfterAcquireFailure}" />
		<property name="testConnectionOnCheckout"
			value="${jdbc.c3p0.testConnectionOnCheckout}" />
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.show_sql">
					${hibernate.show_sql}
				</prop>
				<prop key="hibernate.dialect">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.max_fetch_depth">
					${hibernate.max_fetch_depth}
				</prop>
				<prop key="hibernate.jdbc.fetch_size">
					${hibernate.jdbc.fetch_size}
				</prop>
				<prop key="hibernate.jdbc.batch_size">
					${hibernate.jdbc.batch_size}
				</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">
					${hibernate.bytecode.use_reflection_optimizer}
				</prop>
				<prop key="hibernate.hbm2ddl.auto"><!-- 自动根据PO更新表结构 -->
					${hibernate.hbm2dll}
				</prop>
				<prop key="hibernate.format_sql">
				    ${hibernate.format_sql}
				</prop>
				<prop key="hibernate.c3p0.max_statements">
				    ${hibernate.c3p0.max_statements}
				</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
			</props>
		</property>
		<!-- spring2.5.6才packagesToScan有属性  2.5.5使用annotatedClasses属性-->
		<property name="packagesToScan" value="com.house" />
	</bean>
	
	<bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>
	
	
	<!-- 自动搜索@Component , @Service , @Repository等标注的类 不搜索@Controller的类 -->
	<!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在springMVC-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
	<context:component-scan base-package="com.house" annotation-config="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	

	<!-- 配置事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>
  
    <!-- Activiti begin -->
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="databaseSchemaUpdate" value="false"/>
        <property name="jobExecutorActivate" value="false"/>
        <property name="history" value="full"/>
        <property name="processDefinitionCacheLimit" value="10"/>

        <!-- 生成流程图的字体 -->
        <property name="activityFontName" value="宋体"/>
        <property name="labelFontName" value="宋体"/>

        <!-- 缓存支持
        <property name="processDefinitionCache">
            <bean class="me.kafeitu.demo.activiti.util.cache.DistributedCache" />
        </property>-->

        <!-- 自动部署 
        <property name="deploymentResources">
            <list>
                <value>classpath*:/deployments/*</value>
            </list>
        </property>
        -->

        <!-- 自定义表单字段类型 
        <property name="customFormTypes">
            <list>
                <bean class="me.kafeitu.demo.activiti.activiti.form.UsersFormType"/>
            </list>
        </property>
        -->
    </bean>

    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration"/>
    </bean>

    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>
    <!-- Activiti end -->
    
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
   	</bean>
   	
   	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
   	</bean>

   	<bean id="defaultCacheManager"
   		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
   		<property name="configLocation">
   			<value>classpath:conf/ehcache.xml</value>
   		</property>
   	</bean>
   	
   	<bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager">
            <ref bean="defaultCacheManager"/>
        </property>
   	</bean>
	
	<!-- 支持缓存注解 -->
    <cache:annotation-driven cache-manager="springCacheManager" />

	<!-- 注放ApplicationContext实例 -->
	<bean id="springContextHolder" class="com.house.framework.commons.utils.SpringContextHolder" lazy-init="false" />
	
	<!-- token管理器 -->
	<bean id="formTokenManagerImpl" class="com.house.framework.web.token.impl.FormTokenManagerImpl" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut id="txPointcut" expression="execution(* com.house.*.service.*.*(..))||execution(* com.house.*.service.*.*.*(..))"/>
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config> 
	
	<!-- 日志增强 -->
	<bean id='loggerAspect' class="com.house.framework.log.LoggerAspect" />
	<aop:config proxy-target-class="true">
		<!-- aop:pointcut 定义连接点可定义多个 -->
		<aop:pointcut id="serviceLogPointcut" expression="execution(* com.house.*.service.*.*(..))||execution(* com.house.*.service.*.*.*(..))" />

		<aop:aspect ref="loggerAspect">
			<aop:around method="simpleAdvice" pointcut-ref="serviceLogPointcut"/>
		</aop:aspect>
	</aop:config>
	<import resource="scheduler.xml" />
	<import resource="spring-redis.xml" />
</beans>